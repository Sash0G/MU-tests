name: Build and Release APK
on:
  push:
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set execute permissions for gradlew
        run: chmod +x gradlew
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Decode keystore file
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        run: |
          mkdir -p ~/.android
          echo "$KEYSTORE_FILE" | base64 --decode >  ~/.android/debug.keystore
          if [ ! -s ~/.android/debug.keystore ]; then
            echo "Decoding failed, or the keystore file is empty."
            exit 1
          fi

      - name: Verify keystore file content
        run: |
          echo "Encoded keystore content:"
          base64 ~/android/debug.keystore || echo "Failed to read keystore content"
      - name: Set correct permissions on keystore
        run: chmod 644 ~/.android/debug.keystore
      - name: Build APK
        run: |
            ./gradlew assembleDebug \
            -Pandroid.injected.signing.store.file=${HOME}/.android/debug.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}
      - name: Upload APK to MU-test_published Repository
        env:
          GH_PAT: ${{ secrets.TARGET_REPO_TOKEN }}
        run: |
          REPO_OWNER="Sash0G"
          TARGET_REPO="MU-test_published"
          RELEASE_TAG="${{ github.event.head_commit.message }}"

          # Clone the target repository
          git clone https://$GH_PAT@github.com/$REPO_OWNER/$TARGET_REPO.git
          cd $TARGET_REPO

          # Create a release directory
          mkdir -p releases/$RELEASE_TAG
          cp ../androidApp/build/outputs/apk/debug/androidApp-debug.apk releases/$RELEASE_TAG/

          # Commit and push the changes
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add releases/
          git commit -m "Release $RELEASE_TAG"
          git push origin main
      - name: Clean up
        run: ./gradlew clean
