name: Build and Release APK
on:
  push:
permissions:
  contents: write
  issues: write
  pull-requests: write
jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set execute permissions for gradlew
        run: chmod +x gradlew
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Decode keystore file
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        run: |
          mkdir -p ~/.android
          echo "$KEYSTORE_FILE" | base64 --decode >  ~/.android/debug.keystore
          if [ ! -s ~/.android/debug.keystore ]; then
            echo "Decoding failed, or the keystore file is empty."
            exit 1
          fi

      - name: Verify keystore file content
        run: |
          echo "Encoded keystore content:"
          base64 ~/android/debug.keystore || echo "Failed to read keystore content"
      - name: Set correct permissions on keystore
        run: chmod 644 ~/.android/debug.keystore
      - name: Build APK
        run: |
            ./gradlew assembleDebug \
            -Pandroid.injected.signing.store.file=${HOME}/.android/debug.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: Upload APK & Create Release in Another Repository
        run: |
          # Define variables
          TARGET_OWNER="Sash0G"  
          TARGET_REPO="MU-test_pubkished" 
          TAG_NAME="${{ github.event.head_commit.message }}"
          RELEASE_NAME="Release_$TAG_NAME"
          APK_PATH="androidApp/build/outputs/apk/debug/androidApp-debug.apk"
          
          RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.TARGET_REPO_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$TARGET_OWNER/$TARGET_REPO/releases \
          -d '{
            "tag_name": "'"$TAG_NAME"'",
            "name": "'"$RELEASE_NAME"'",
            "draft": false,
            "prerelease": false
          }')

          UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed "s/{?name,label}//")
          curl -X POST -H "Authorization: token ${{ secrets.TARGET_REPO_TOKEN }}" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @"$APK_PATH" \
            "$UPLOAD_URL?name=$(basename $APK_PATH)"
          env:
            TARGET_REPO_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}
      - name: Upload APK as Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: androidApp/build/outputs/apk/debug/androidApp-debug.apk
          tag_name: '${{ github.event.head_commit.message }}'
          name: 'Release_${{ github.event.head_commit.message }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          
      - name: Clean up
        run: ./gradlew clean
